server.port=8088

#DataSource Config
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://192.168.66.6:33065/Test_encrypt?useUnicode=true&characterEncoding=UTF8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT
#spring.datasource.username=root
#spring.datasource.password=root


spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT
spring.datasource.username=root
spring.datasource.password=123456


#spring.main.allow-bean-definition-overriding = true

#spring.shardingsphere.datasource.names = m0,m1,m2,s0,s1,s2
#
#
#spring.shardingsphere.datasource.m0.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m0.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m0.url = jdbc:mysql://192.168.66.6:33065/store_db?useUnicode=true
#spring.shardingsphere.datasource.m0.username = root
#spring.shardingsphere.datasource.m0.password = root
#
#spring.shardingsphere.datasource.m1.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m1.url = jdbc:mysql://192.168.66.6:33065/product_db_1?useUnicode=true
#spring.shardingsphere.datasource.m1.username = root
#spring.shardingsphere.datasource.m1.password = root
#
#
#spring.shardingsphere.datasource.m2.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m2.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m2.url = jdbc:mysql://192.168.66.6:33065/product_db_2?useUnicode=true
#spring.shardingsphere.datasource.m2.username = root
#spring.shardingsphere.datasource.m2.password = root
#
#
#spring.shardingsphere.datasource.s0.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.s0.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.s0.url = jdbc:mysql://192.168.66.6:33066/store_db?useUnicode=true
#spring.shardingsphere.datasource.s0.username = root
#spring.shardingsphere.datasource.s0.password = root
#
#spring.shardingsphere.datasource.s1.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.s1.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.s1.url = jdbc:mysql://192.168.66.6:33066/product_db_1?useUnicode=true
#spring.shardingsphere.datasource.s1.username = root
#spring.shardingsphere.datasource.s1.password = root
#
#
#spring.shardingsphere.datasource.s2.type =com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.s2.driver-class-name = com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.s2.url = jdbc:mysql://192.168.66.6:33066/product_db_2?useUnicode=true
#spring.shardingsphere.datasource.s2.username = root
#spring.shardingsphere.datasource.s2.password = root
#
## 主库从库逻辑数据源定义 ds0为store_db ds1为product_db_1 ds2为product_db_2
## 分了主从，可配置主写从读
#spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m0
#spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s0
#
#spring.shardingsphere.sharding.master-slave-rules.ds1.master-data-source-name=m1
#spring.shardingsphere.sharding.master-slave-rules.ds1.slave-data-source-names=s1
#
#spring.shardingsphere.sharding.master-slave-rules.ds2.master-data-source-name=m2
#spring.shardingsphere.sharding.master-slave-rules.ds2.slave-data-source-names=s2
#
## spring.shardingsphere.sharding.master-slave-rules.ds2.slave-data-source-names=s2,s3?多个从库
#
## 默认分库策略，以store_info_id为分片键，分片策略为store_info_id % 2 + 1，也就是store_info_id为双数的数据进入ds1，为单数的进入ds2
#
## 先是根据store id 分到不同的库，下面要进行分表
## 默认分库策略
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = store_info_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = ds$->{store_info_id % 2 + 1}
#
## product_info分表策略，分布在ds1,ds2的product_info_1 product_info_2表 ，分片策略为product_info_id % 2 + 1，product_info_id生成为雪花算法，为双数的数据进入product_info_1表，为单数的进入product_info_2表
## 根据上面store_info_id 分库，根据product_info_id 分表
#spring.shardingsphere.sharding.tables.product_info.actual-data-nodes = ds$->{1..2}.product_info_$->{1..2}
#spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.sharding-column = product_info_id
#spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.algorithm-expression = product_info_$->{product_info_id % 2 + 1}
#spring.shardingsphere.sharding.tables.product_info.key-generator.column=product_info_id
#spring.shardingsphere.sharding.tables.product_info.key-generator.type=SNOWFLAKE
#
## product_descript分表策略，分布在ds1,ds2的product_descript_1 product_descript_2表 ，分片策略为product_info_id % 2 + 1，id生成为雪花算法，product_info_id为双数的数据进入product_descript_1表，为单数的进入product_descript_2表
#spring.shardingsphere.sharding.tables.product_descript.actual-data-nodes = ds$->{1..2}.product_descript_$->{1..2}
#spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.sharding-column = product_info_id
#spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.algorithm-expression = product_descript_$->{product_info_id % 2 + 1}
#spring.shardingsphere.sharding.tables.product_descript.key-generator.column=id
#spring.shardingsphere.sharding.tables.product_descript.key-generator.type=SNOWFLAKE
#
## store_info分表策略，固定分配至ds0的store_info真实表，
#spring.shardingsphere.sharding.tables.store_info.actual-data-nodes = ds$->{0}.store_info
#spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.sharding-column = id
#spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.algorithm-expression = store_info
#
## 设置product_info,product_descript为绑定表
#spring.shardingsphere.sharding.binding-tables[0] = product_info,product_descript
#
## 设置region为广播表(公共表)，每次更新操作会发送至所有数据源
#spring.shardingsphere.sharding.broadcast-tables=region
#
## 打开sql输出日志
#spring.shardingsphere.props.sql.show = true

#encrypt:
#encryptors:  #定义加密算法
#encryptor_aes: #加密算法1 AES，名字可以自定义
#type: aes
#props:
#aes.key.value: 123456
#tables:        #定义脱敏规则
#t_order:    #目标表
#columns:
#pwd:    #目标表逻辑列
#plainColumn: pwd_plain  #目标表明文列
#cipherColumn: pwd_cipher  #目标表密文列
#encryptor: encryptor_aes     #采用的加密算法
#props:
#sql.show: true                              #打印SQL
#query.with.cipher.comlum: true     #使用密文搜索

# encryptor_aes定义算法名称
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.type=aes
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.qualified-columns=product_info.spec
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.props.aes.key.value=123456
#
#spring.shardingsphere.encrypt.tables.product_info.columns.spec.plainColumn=spec
#spring.shardingsphere.encrypt.tables.product_info.columns.spec.cipherColumn=spec_cipher
#spring.shardingsphere.encrypt.tables.product_info.columns.spec.encryptor=encryptor_aes
#spring.shardingsphere.props.query.with.cipher.comlum=false

#spring.shardingsphere.encrypt.encryptors.name_encryptor.type=aes
#spring.shardingsphere.encrypt.encryptors.name_encryptor.props.aes.key.value=123456
#spring.shardingsphere.encrypt.encryptors.pwd_encryptor.type=assistedTest
#spring.shardingsphere.encrypt.tables.t_user.columns.user_name.plainColumn=user_name_plain
#spring.shardingsphere.encrypt.tables.t_user.columns.user_name.cipherColumn=user_name
#spring.shardingsphere.encrypt.tables.t_user.columns.user_name.encryptor=name_encryptor
#spring.shardingsphere.encrypt.tables.t_user.columns.pwd.cipherColumn=pwd
#spring.shardingsphere.encrypt.tables.t_user.columns.pwd.assistedQueryColumn=assisted_query_pwd
#spring.shardingsphere.encrypt.tables.t_user.columns.pwd.encryptor=pwd_encryptor

#spring.shardingsphere.props.query.with.cipher.comlum=true

#--------------------------
#spring.shardingsphere.datasource.name=ds
#
#spring.shardingsphere.datasource.ds.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds.url=jdbc:mysql://192.168.66.6:33065/Test_encrypt?serverTimezone=UTC&useSSL=false
#spring.shardingsphere.datasource.ds.username=root
#spring.shardingsphere.datasource.ds.password=root
#spring.shardingsphere.datasource.ds.max-total=100
#
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.type=aes
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.props.aes.key.value=123456
#spring.shardingsphere.encrypt.encryptors.encryptor_aes.qualified-columns=User.user_decrypt
#spring.shardingsphere.encrypt.tables.User.columns.user_decrypt.plainColumn=user_decrypt
#spring.shardingsphere.encrypt.tables.User.columns.user_decrypt.cipherColumn=user_encrypt
##spring.shardingsphere.encrypt.tables.t_order.columns.user_id.assistedQueryColumn=user_assisted
#spring.shardingsphere.encrypt.tables.t_order.columns.user_id.encryptor=encryptor_aes
#
#spring.shardingsphere.props.query.with.cipher.column=true

spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.sharding-column = product_info_id
